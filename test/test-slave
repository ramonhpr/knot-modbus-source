#!/usr/bin/python
import argparse
import sys
import dbus

def main(options):
    bus = dbus.SystemBus()

    cmd = options.command
    cmd_value = options.value
    if (options.path):
        path = options.path
    else:
        path = "/"

    obj = bus.get_object("br.org.cesar.modbus", path)
    props = dbus.Interface(obj, "org.freedesktop.DBus.Properties")
    manager = dbus.Interface(obj, "br.org.cesar.modbus.Manager1")

    if (cmd == "info"):
        print (props.GetAll("br.org.cesar.modbus.Manager1"))
        return 0

    if (cmd == "add"):
        [slaveid, name, addr] = cmd_value
        idval = dbus.Byte(int(slaveid))
        nameval = dbus.String(name)
        addrval = dbus.String(addr)
        print ("Adding slave:")
        print ("  Id:  %s (1 - 247)" % slaveid)
        print ("  Name:  %s" % nameval)
        print ("  Address:  %s (host:port)" % addr)
        slave_dict = dict()
        slave_dict.update({"Id": idval})
        slave_dict.update({"Name": nameval})
        slave_dict.update({"Address": addrval})
        dbus_dict = dbus.Dictionary(slave_dict, signature='sv')
        path = manager.AddSlave(dbus_dict);
        print ("PATH: %s" % path)
        props.Set("br.org.cesar.modbus.Slave1", "Enable", True)
        return 0

    if (cmd == "remove"):
        [objpath] = cmd_value
        print ("Removing slave %s" % objpath)
        devpath = dbus.ObjectPath(objpath)
        print (manager.RemoveSlave(devpath))
        return 0

    if (cmd == "enable"):
        [value] = cmd_value
        print ("PATH: %s" % path)
        enable = dbus.Boolean(value)
        props.Set("br.org.cesar.modbus.Slave1", "Enable", enable)
        return 0

    if (cmd == "list"):
        iface = dbus.Interface(obj,"org.freedesktop.DBus.ObjectManager")
        slaves = []
        for aux in iface.GetManagedObjects():
                var = aux.split("/")
                slaves.append(var[1])
        slaves = list(set(slaves))

        if not slaves:
            print("No slaves found.")
            return 0
        else:
            print("Slaves found: {}".format(slaves))
            return 0

def usage():
    commands = [
        'info',
        'list',
        'add [Name] [Type] [Address] [Size]',
        'remove [slave path]',
    ]
    return 'Commands:\n\t' + '\n\t'.join(commands)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Test dbus slave', formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument('-p', '--path', dest="path",
                        help="object path from slave", metavar="PATH")
    parser.add_argument('command', metavar='COMMAND', type=str, nargs='?',
                        choices=['info', 'list', 'add', 'remove', 'enable'],
                        help=usage())
    parser.add_argument('value', metavar='VALUE', nargs='*', help='value')
    options = parser.parse_args()

    ret = main(options)
    sys.exit(ret)
