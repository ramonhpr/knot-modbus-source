#!/usr/bin/python
from argparse import ArgumentParser
from random import randint
import sys
import dbus


def main(args):
    if (args.help == True):
        print("Usage: {} [-h] [-a ID NAME IPADDRESS] [-c N] [-l] [-rm PATH] [-p"
              " PATH]".format(sys.argv[0]))
        print("")
        print("Optional arguments:")
        print("  -a ID NAME IP:PORT, --add ID NAME IP:PORT\n"
              "                        adds a new slave")
        print("  -c N,--create N       adds n new slaves")
        print("  -h, --help            show this help massage and exit")
        print("  -i, --info            show your dbus information")
        print("  -l, --list            list all slaves")
        print("  -p PATH, --path PATH  specify the path to manipulate slaves")
        print("  -rm SLAVEPATH, --remove SLAVEPATH\n"
              "                        remove a given slave")
        print("  -A ADDRESS, --dbus-address ADDRESS\n"
              "                        dbus address to connect")
        return 0

    if (args.address):
        bus = dbus.bus.BusConnection(args.address)
    else:
        bus = dbus.SystemBus()

    if (args.path == None):
        path = "/"
    else:
        path = args.path

    obj = bus.get_object("br.org.cesar.modbus", path)
    props = dbus.Interface(obj, "org.freedesktop.DBus.Properties")
    manager = dbus.Interface(obj, "br.org.cesar.modbus.Manager1")

    if (args.info == True):
        print (props.GetAll("br.org.cesar.modbus.Manager1"))
        return 0

    if (args.add != None):
        print ("Adding slave:")
        print ("  Id:  %s (1 - 247)" % args.add[0])
        print ("  Name:  %s" % args.add[1])
        print ("  Address:  %s (host:port)" % args.add[2])
        idval = dbus.Byte(int(args.add[0]))
        nameval = dbus.String(args.add[1])
        addrval = dbus.String(args.add[2])
        slave_dict = dict()
        slave_dict.update({"Id": idval})
        slave_dict.update({"Name": nameval})
        slave_dict.update({"IpAddress": addrval})
        dbus_dict = dbus.Dictionary(slave_dict, signature='sv')
        path = manager.AddSlave(dbus_dict)
        print ("PATH: %s" % path)
        return 0

    if (args.remove != None):
        print ("Removing slave %s" % args.remove)
        devpath = dbus.ObjectPath(args.remove)
        print (manager.RemoveSlave(devpath))
        return 0

    if (args.list == True):
        iface = dbus.Interface(obj,"org.freedesktop.DBus.ObjectManager")
        slaves = []
        for aux in iface.GetManagedObjects():
                var = aux.split("/")
                if var[1] == '':
                 continue
                slaves.append(var[1])
        slaves = list(set(slaves))

        if not slaves:
            print("No slaves found.")
            return 0
        else:
            print("Slaves found: {}".format(slaves))
            return 0

    if (args.create != None):
        DEFAULT_ADDR = ["google.com:80", "microsoft.com:80","engadget.com:80"]
        i = 1

        for i in range(0,args.create):
            idval = dbus.Byte(randint(1,247))
            nameval = dbus.String("test_{}".format(int(idval)))
            addrval = dbus.String(DEFAULT_ADDR[randint(0,2)])
            slave_dict = dict()
            slave_dict.update({"Id": idval})
            slave_dict.update({"IpAddress": addrval})
            dbus_dict = dbus.Dictionary(slave_dict, signature='sv')
            path = manager.AddSlave(dbus_dict)
            print ("PATH: %s" % path)
        return 0


if __name__ == "__main__":
    parser = ArgumentParser(prog="./test-slave", add_help=False)
    parser.add_argument("-p", "--path", action="store", type=str)
    parser.add_argument('-A', '--dbus-address', dest="address", type=str)
    parser.add_argument("-a", "--add", action ="store", type=str, nargs=3)
    parser.add_argument("-rm", "--remove", action="store", type=str)
    parser.add_argument("-h", "--help", action="store_true")
    parser.add_argument("-l", "--list", action="store_true")
    parser.add_argument("-i", "--info", action="store_true")
    (args) = parser.parse_args()
    ret = main(args)
    sys.exit(ret)
