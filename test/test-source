#!/usr/bin/python
import argparse
import sys
import dbus

def main(options):
    if (options.address):
        bus = dbus.bus.BusConnection(options.address)
    else:
        bus = dbus.SystemBus()

    cmd = options.command
    cmd_value = options.value
    if (options.path):
        path = options.path
    else:
        path = "/"

    obj = bus.get_object("br.org.cesar.modbus", path)
    props = dbus.Interface(obj, "org.freedesktop.DBus.Properties")
    slave = dbus.Interface(obj, "br.org.cesar.modbus.Slave1")

    if (cmd == "info"):
        print (props.GetAll("br.org.cesar.modbus.Slave1"))
        return 0

    if (cmd == "add"):
        [name, typesource, addr, size] = cmd_value
        print ("Adding source:")
        print ("  Name:  %s" % name)
        print ("  Type:  %s" % typesource)
        print ("  Address:  %s" % addr)
        print ("  Size:  %s" % size)

        nameval = dbus.String(name)
        typeval = dbus.String(typesource)
        addrval = dbus.UInt16(addr)
        sizeval = dbus.UInt16(size)
        slave_dict = dict()
        slave_dict.update({"Name": nameval})
        slave_dict.update({"Type": typeval})
        slave_dict.update({"Address": addrval})
        slave_dict.update({"Size": sizeval})
        dbus_dict = dbus.Dictionary(slave_dict, signature='sv')
        print ("PATH: %s" % slave.AddSource(dbus_dict))
        return 0

    if (cmd == "list"):
        list_obj = bus.get_object("br.org.cesar.modbus","/")
        iface = dbus.Interface(list_obj,"org.freedesktop.DBus.ObjectManager")
        sources = []
        for aux in iface.GetManagedObjects():
                var = aux.split("/")
                if ("/" + var[1] == path):
                    try:
                        sources.append(var[2])
                    except:
                        continue
        if not sources:
            print("No sources in: {}".format(path))
            return 0
        else:
            print("Sources in {}: \n {}".format(path,sources))
            return 0

    if (cmd == "remove"):
        [objpath] = cmd_value
        print ("Removing source %s" % objpath)
        devpath = dbus.ObjectPath(objpath)
        print (slave.RemoveSource(devpath))
        return 0

def usage():
    commands = [
        'info',
        'list',
        'add [Name] [Type] [Address] [Size]',
        'remove [slave path]',
    ]
    return 'Commands:\n\t' + '\n\t'.join(commands)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Test dbus source', formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument('-p', '--path', dest="path",
                        help="object path from slave", metavar="PATH")
    parser.add_argument('-a', '--dbus-address', dest="address",
                        help="dbus address to connect with", metavar="ADDRESS")
    parser.add_argument('command', metavar='COMMAND', type=str, nargs='?',
                        choices=['info', 'list', 'add', 'remove', 'enable'],
                        help=usage())
    parser.add_argument('value', metavar='VALUE', nargs='*', help='value')

    options = parser.parse_args()
    ret = main(options)
    sys.exit(ret)
